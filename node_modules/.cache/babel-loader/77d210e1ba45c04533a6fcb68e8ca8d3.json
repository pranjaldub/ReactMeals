{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\ReactMeals\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\n//component for providing\n//we will use useReducer for managing state\nimport { useReducer } from \"react\"; //Headerbutton.js needs access to this context for count badge\n//meals.js will need acess to the context to add item to the cart\n\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = +state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.item.findIndex(item => item.id === action.item.id);\n    const existingItem = state.item[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n\n    if (existingItem) {\n      updatedItem = { ...existingItem,\n        amount: existingItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      //updatedItem = {...state.items}\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REM') {\n    const item = state.item.findIndex(item => item.id === action.id);\n    const updatedTotalAmount = +state.totalAmount - action.item.price * action.item.amount;\n\n    if (item.amount > 1) {\n      let amount = item.amount - 1;\n      updatedItem = { ...state.items[item],\n        amount: amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[item] = updatedItem;\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    } else {\n      state.items.splice(item, 1);\n      updatedItems = [...state.items];\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //fucntion to add items\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  }; //function to remove item from cart\n\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REM',\n      id: id\n    });\n  }; //global context data\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeitem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"irLoCnUjZMazMtjqft6WkB530Qg=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["F:/React/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingItem","updatedItem","updatedItems","concat","splice","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeitem","children"],"mappings":"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","sourcesContent":["//component for providing\r\n//we will use useReducer for managing state\r\nimport { useReducer } from \"react\";\r\n\r\n\r\n//Headerbutton.js needs access to this context for count badge\r\n//meals.js will need acess to the context to add item to the cart\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\n\r\nconst defaultCartState ={\r\n    items:[],\r\n    totalAmount:0,\r\n}\r\n\r\n\r\nconst cartReducer = (state ,action) =>{\r\n    if(action.type==='ADD'){\r\n        \r\n        const updatedTotalAmount = +state.totalAmount+action.item.price*action.item.amount;\r\n        const existingCartItemIndex = state.item.findIndex(item => item.id === action.item.id)\r\n        const existingItem = state.item[existingCartItemIndex]\r\n\r\n        let updatedItem;let updatedItems;\r\n        if(existingItem){\r\n            updatedItem = {...existingItem , amount : existingItem.amount+action.item.amount}\r\n        \r\n        updatedItems = [...state.items]\r\n        updatedItems[existingCartItemIndex] = updatedItem}\r\n        else{\r\n            //updatedItem = {...state.items}\r\n             updatedItems = state.items.concat(action.item)\r\n        }\r\n\r\n\r\n\r\n\r\n       \r\n        return {items:updatedItems ,totalAmount:updatedTotalAmount}\r\n    }\r\n    if(action.type === 'REM'){\r\n        const item = state.item.findIndex(item => item.id === action.id)\r\n        const updatedTotalAmount = +state.totalAmount-action.item.price*action.item.amount;\r\n        if(item.amount > 1){\r\n            \r\n            let amount = item.amount-1\r\n            updatedItem = {...state.items[item] , amount : amount}\r\n            updatedItems = [...state.items]\r\n            updatedItems[item] = updatedItem\r\n            return {items:updatedItems ,totalAmount:updatedTotalAmount}\r\n        }\r\n        else{\r\n            state.items.splice(item,1)\r\n            updatedItems = [...state.items]\r\n            return {items:updatedItems ,totalAmount:updatedTotalAmount}\r\n\r\n        }\r\n    }\r\n    return defaultCartState;\r\n}\r\n\r\nconst CartProvider = (props) =>{\r\n\r\n    const [cartState , dispatchCartAction] = useReducer(cartReducer , defaultCartState);\r\n    //fucntion to add items\r\n    const addItemToCartHandler = item =>{\r\n        dispatchCartAction({type:'ADD' , item:item})\r\n    }\r\n\r\n    //function to remove item from cart\r\n    const removeItemFromCartHandler = id => {\r\n        dispatchCartAction({type:'REM' , id:id})\r\n    }\r\n\r\n    //global context data\r\n    const cartContext = {\r\n        items:cartState.items,\r\n        totalAmount : cartState.totalAmount,\r\n        addItem:addItemToCartHandler,\r\n        removeitem : removeItemFromCartHandler\r\n    };\r\n    return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>\r\n}\r\n\r\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}